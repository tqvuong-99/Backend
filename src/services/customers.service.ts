import createError from "http-errors";
import customerModel from "../models/customer.model";
import { ICustomerCreate } from "../types/model";
import mongoose from "mongoose";

const getAll = async (query: any) => {
    //L·∫•y ra c√°c tham s·ªë truy·ªÅn v√†o
    //page = query.page, n·∫øu page kh√¥ng t·ªìn t·∫°i th√¨ m·∫∑c ƒë·ªãnh l√† 1
  const { page = 1, limit = 10, sort_type = 'desc', sort_by='createdAt' } = query;

  //N·∫øu t·ªìn t·∫°i sortType v√† sortBy th√¨ s·∫Ω s·∫Øp x·∫øp theo sortType v√† sortBy
    //N·∫øu kh√¥ng t·ªìn t·∫°i th√¨ s·∫Ω s·∫Øp x·∫øp theo createdAt
    let sortObject = {};
    sortObject = { ...sortObject, [sort_by]: sort_type === 'desc' ? -1 : 1 };

    console.log('<<=== üöÄsortObject  ===>>',sortObject);

    //T√¨m ki·∫øm theo ƒëi·ªÅu ki·ªán
    let where = {};
    //N·∫øu c√≥ t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
    if (query.customer_name && query.customer_name.length > 0) {
        where = { ...where, customer_name: { $regex: query.customer_name, $options: 'i' } };
    }
    //N·∫øu t√¨m ki·∫øm theo danh m·ª•c
    if (query.category && query.category.length > 0) {
        where = { ...where, category: query.category };
    }
    //N·∫øu t√¨m ki·∫øm theo th∆∞∆°ng hi·ªáu
    if (query.customer_id && query.customer_id.length > 0) {
        where = { ...where, customer_id: query.customer_id };
    }

    //Th√™m c√°c ƒëi·ªÅu ki·ªán kh√°c n·∫øu c·∫ßn

  const customers = await customerModel
  .find(where)
  .skip((page - 1) * limit)
  .limit(limit)
  .sort({...sortObject});
  //ƒê·∫øm t·ªïng s·ªë record hi·ªán c√≥ c·ªßa collection Product
const count = await customerModel.countDocuments(where);

return {
  customers,
  panigation:{
    totalRecord: count,
    page: +page,
    limit: +limit
  }
}};

const getById = async (id: mongoose.Types.ObjectId) => {
  const customer = await customerModel.findById(id);
  if (!customer) {
    throw createError(400, "Customer not found");
  }

  return customer;
};

const create = async (payload: ICustomerCreate) => {
  //Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i s·∫£n ph·∫©m c√≥ t√™n gi·ªëng nhau kh√¥ng
  const customerExist = await customerModel.findOne({
    customer_name: payload.customer_name,
  });
  if (customerExist) {
    throw createError(400, "Customer already exists");
  }
  const customer = new customerModel(payload);
  await customer.save();
  // Tr·∫£ v·ªÅ item v·ª´a ƒë∆∞·ª£c t·∫°o
  return customer;
};
const updateById = async (
  id: mongoose.Types.ObjectId,
  payload: ICustomerCreate
) => {
  //Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i s·∫£n ph·∫©m c√≥ id n√†y kh√¥ng
  const customer = await getById(id);
  // Ki·ªÉm tra c√≥ t√™n gi·ªëng nhau kh√¥ng
  const customerExist = await customerModel.findOne({
    customer_name: payload.customer_name,
  });
  if (customerExist && customerExist._id.toString() !== id.toString()) {
    throw createError(400, "Customer name already exists");
  }
  // C·∫≠p nh·∫≠t l·∫°i t√™n s·∫£n ph·∫©m
  Object.assign(customer, payload); //tr·ªôn d·ªØ li·ªáu c≈© v√† m·ªõi
  await customer.save(); //l∆∞u l·∫°i v√†o db
  return customer;
};

const deleteById = async (id: mongoose.Types.ObjectId) => {
  const customer = await getById(id);
  if (!customer) {
    throw createError(400, "Customer not found");
  }
  await customer.deleteOne({ _id: customer._id });
  return customer;
};
export default {
  getAll,
  getById,
  create,
  updateById,
  deleteById,
};
